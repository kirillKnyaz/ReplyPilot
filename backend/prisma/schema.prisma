// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  profile        UserProfile?
  subscription   Subscription?
  leads          Lead[]
  messages       Message[]
  searchResults  SearchResult[]
  lists          List[]
}

model UserProfile {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  profileData  Json?
  icpSummary   Json?   
  createdAt    DateTime  @default(now())
}

model Subscription {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  stripeId          String   @unique
  tier              String
  active            Boolean
  cancel_at_period_end Boolean @default(false)
  current_period_end Int
  ended_at          DateTime?
  status            String   
  searchTokens      Int @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}

model Lead {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])    
  mapsUri       String?
  placesId      String?  @unique
  location      String
  priority      Priority @default(MEDIUM)

  name          String
  type          String?
  description   String?
  keywords      String[] // from GPT

  // Contact info fields
  website       String?
  email         String?
  phone         String?

  // Socials
  instagram     String?
  facebook      String?
  tiktok        String?

  // Workflow flags
  identityComplete Boolean @default(false)
  contactComplete  Boolean @default(false)
  socialComplete   Boolean @default(false)

  messages      Message[]
  sources       LeadSource[]
  logs          LeadEnrichmentLog[]
  lists         LeadList[]
}

// lead lists here
model List {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  color     String?    // optional hex or token like "indigo"

  items     LeadList[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Prevent duplicate list names per user; remove if you want duplicates
  @@unique([userId, name])
  @@index([userId, createdAt])
}

model LeadList {
  id        String   @id @default(cuid())

  listId    String
  leadId    String

  // For custom ordering within a list; nullable if you don't care yet
  position  Float?

  createdAt DateTime @default(now())

  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  // Donâ€™t allow the same lead twice in the same list
  @@unique([listId, leadId])
  @@index([leadId])
}

model LeadSource {
  id         String         @id @default(uuid())
  leadId     String
  lead       Lead           @relation(fields: [leadId], references: [id])
  goal       SourceGoal     
  type       SourceType
  url        String
}

model LeadEnrichmentLog {
  id         String           @id @default(uuid())
  leadId     String
  userId     String
  goal       SourceGoal
  step       EnrichmentStep
  status     EnrichmentStatus
  message    String?
  attempt    Int              @default(1)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  lead       Lead             @relation(fields: [leadId], references: [id])
}

model Message {
  id         String         @id @default(uuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  leadId     String
  lead       Lead           @relation(fields: [leadId], references: [id])
  content    String
  sentAt     DateTime       @default(now())
  method     MessageType    
  status     MessageStatus  @default(PENDING)
  reply      Reply?

  @@index([userId, leadId])
}

model Reply {
  id         String         @id @default(uuid())
  messageId  String         @unique
  message    Message        @relation(fields: [messageId], references: [id])
  content    String
  repliedAt  DateTime       @default(now())
  sentiment  Sentiment
  category   ReplyCategory
}

// schema.prisma
enum SearchType {
  NEARBY
  TEXT
}

model SearchResult {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  type            SearchType
  centerLat       Float
  centerLng       Float
  radiusMeters    Int

  // one of the two depending on type
  category        String?
  textQuery       String?

  maxResultCount  Int
  placesCount     Int
  tokensCharged   Int       @default(0)

  // raw Google Places response payload you care about
  results         Json

  createdAt       DateTime  @default(now())

  @@index([userId, createdAt])
  @@index([type, createdAt])
}

enum Priority {
  CERTAIN
  HIGH
  MEDIUM
  LOW
}

enum MessageType {
  EMAIL
  SOCIAL
  SMS
  PHONE
}

enum MessageStatus {
  PENDING
  SENT
  FAILED
  REPLIED
}

enum Sentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum ReplyCategory {
  INTERESTED
  GHOSTED
  SOFT_NO
  IRRELEVANT
}

enum SourceType {
  WEBSITE
  GCS_WEBSITE
  SOCIAL
}

enum SourceGoal {
  IDENTITY
  CONTACT
  SOCIAL
}

enum EnrichmentStep {
  GET_LEAD
  GET_SOURCE
  SCRAPE_SOURCE
  EVALUATE_GPT
}

enum EnrichmentStatus {
  STARTED
  SUCCESS
  ERROR
}